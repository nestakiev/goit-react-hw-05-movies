{"version":3,"file":"static/js/186.2f9e06de.chunk.js","mappings":"gMAgCA,UA5BgB,WACZ,IAAOA,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,IAAiBN,GAASO,KAAKH,EAClC,GAAE,CAACJ,IAEsC,IAAnBG,EAAQK,QAI3B,qEAEA,wBACKL,EAAQM,KAAI,SAAAC,GACT,IAAOC,EAAuBD,EAAvBC,GAAIC,EAAmBF,EAAnBE,QAASC,EAAUH,EAAVG,OACpB,OACI,2BACI,wBAAG,oCAAYA,QACf,uBAAID,MAFCD,EAKhB,KAGZ,C,2MC5BDG,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,sGACPF,IAAAA,IAAA,qCAAwCC,IADjC,cACxBE,EADwB,OAExBC,EAAiBD,EAASE,KAAKC,QAAQX,KAAI,SAAAY,GAE7C,MAAO,CACHV,GAFgBU,EAAbV,GAGHW,MAHgBD,EAATC,MAKd,IAR6B,kBASvBJ,GATuB,2CAAH,qDAYlBK,EAAiB,mCAAG,WAAOZ,GAAP,qGACNG,IAAAA,IAAA,gBAAmBH,EAAnB,oBAAiCI,IAD3B,cACvBE,EADuB,SAG8CA,EAASE,KAA7EK,EAHsB,EAGtBA,aAAcF,EAHQ,EAGRA,MAAOG,EAHC,EAGDA,SAAUC,EAHT,EAGSA,OAAQC,EAHjB,EAGiBA,YAAaC,EAH9B,EAG8BA,aAH9B,kBAKtB,CACHJ,aAAAA,EACAF,MAAAA,EACAG,SAAAA,EACAC,OAAAA,EACAC,YAAAA,EACAC,aAAAA,IAXyB,2CAAH,sDAcjBC,EAAiB,mCAAG,WAAOlB,GAAP,yFACNG,IAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,oBADM,cACvBE,EADuB,OAGvBa,EAAWb,EAASE,KAAKY,KAAKtB,KAAI,SAAAuB,GAEpC,MAAO,CACHC,KAFwCD,EAArCC,KAGHC,UAHwCF,EAA/BE,UAITC,aAJwCH,EAApBG,aAKpBxB,GALwCqB,EAANrB,GAMzC,IAV4B,kBAYtBmB,GAZsB,2CAAH,sDAejBxB,EAAgB,mCAAG,WAAOK,GAAP,yFACLG,IAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,EAAzC,2BADK,cACtBE,EADsB,OAEtBd,EAAUc,EAASE,KAAKC,QAAQX,KAAI,SAAAuB,GAEtC,MAAO,CACHrB,GAF2BqB,EAAxBrB,GAGHE,OAH2BmB,EAApBnB,OAIPD,QAJ2BoB,EAAZpB,QAKtB,IAR2B,kBAUrBT,GAVqB,2CAAH,sDAahBiC,EAAiB,mCAAG,WAAOC,GAAP,yFACNvB,IAAAA,IAAA,gCAAmCC,EAAnC,wCAA0EsB,IADpE,UACvBpB,EADuB,OASJ,KAPnBqB,EAAYrB,EAASE,KAAKC,QAAQX,KAAI,SAAAuB,GAExC,MAAO,CACHrB,GAFgBqB,EAAbrB,GAGHW,MAHgBU,EAATV,MAId,KAEad,OATe,uBAUzB+B,MAAM,yDAVmB,kBAWlB,IAXkB,gCAatBD,GAbsB,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/moviesAPI.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { loadReviewsMovie } from \"services/moviesAPI\";\n\nconst Reviews = () => {\n    const {movieId} = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        loadReviewsMovie(movieId).then(setReviews)\n    }, [movieId]);\n\n    const isReviewsEmpty = reviews.length === 0;\n    \n    return (\n        isReviewsEmpty ? \n        <p>We don't have any reviews for this movie</p>\n        :\n        <ol>\n            {reviews.map(review => {\n                const {id, content, author} = review;\n                return (\n                    <li key={id}>\n                        <p><b>Author: {author}</b></p>\n                        <p>{content}</p>\n                    </li>\n                )\n            })}\n        </ol>\n    )\n};\n\nexport default Reviews;","import axios from \"axios\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"70cb528e64bd13ac19df414fea399cc5\";\n\nexport const loadTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    const trendingMovies = response.data.results.map(movie => {\n        const {id, title} = movie;\n        return {\n            id,\n            title\n        }\n    })\n    return trendingMovies;\n};\n\nexport const loadFullInfoMovie = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n\n    const {vote_average, title, overview, genres, poster_path, release_date} = response.data;\n\n    return {\n        vote_average,\n        title,\n        overview,\n        genres, \n        poster_path,\n        release_date}\n};\n\nexport const loadCastInfoMovie = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n\n    const castInfo = response.data.cast.map(a => {\n        const {name, character, profile_path, id} = a;\n        return {\n            name,\n            character,\n            profile_path,\n            id}\n    });\n\n    return castInfo;\n};\n\nexport const loadReviewsMovie = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    const reviews = response.data.results.map(a => {\n        const {id, author, content } = a;\n        return {\n            id,\n            author,\n            content}\n    });  \n    \n    return reviews;\n}\n\nexport const loadMovieOnSearch = async (searchQuery) => {\n    const response = await axios.get(`search/movie/?api_key=${API_KEY}&language=en-US&page=1&query=${searchQuery}`);\n    const movieList = response.data.results.map(a => {\n        const {id, title} = a;\n        return {\n            id,\n            title}\n    })\n\n    if (movieList.length === 0) {\n        alert(\"We can't found anythings, please repeate your request\")\n        return [];\n    }\n    return movieList;\n}\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","loadReviewsMovie","then","length","map","review","id","content","author","axios","API_KEY","loadTrendingMovies","response","trendingMovies","data","results","movie","title","loadFullInfoMovie","vote_average","overview","genres","poster_path","release_date","loadCastInfoMovie","castInfo","cast","a","name","character","profile_path","loadMovieOnSearch","searchQuery","movieList","alert"],"sourceRoot":""}